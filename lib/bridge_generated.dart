// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.6.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

abstract class EaseClient {
  Stream<ArgReportPanic> initBindReportPanic({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitBindReportPanicConstMeta;

  Stream<void> initNotifySchedule({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitNotifyScheduleConstMeta;

  Stream<void> initBindResumeMusic({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitBindResumeMusicConstMeta;

  Stream<void> initBindPauseMusic({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitBindPauseMusicConstMeta;

  Stream<void> initBindStopMusic({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitBindStopMusicConstMeta;

  Stream<int> initSeekMusic({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitSeekMusicConstMeta;

  Stream<String> setMusicUrl({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetMusicUrlConstMeta;

  Stream<String> bindToastError({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBindToastErrorConstMeta;

  InvokeRet initializeClient({required ArgInitializeApp arg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitializeClientConstMeta;

  InvokeRet flushSchedule({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFlushScheduleConstMeta;

  InvokeRet initializeApp({required ArgInitializeApp arg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitializeAppConstMeta;

  InvokeRet updateStoragePermission({required bool arg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUpdateStoragePermissionConstMeta;

  InvokeRet playMusic({required MusicId arg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPlayMusicConstMeta;

  InvokeRet pauseMusic({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPauseMusicConstMeta;

  InvokeRet resumeMusic({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kResumeMusicConstMeta;

  InvokeRet stopMusic({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStopMusicConstMeta;

  InvokeRet seekMusic({required ArgSeekMusic arg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSeekMusicConstMeta;

  InvokeRet setCurrentMusicPositionForPlayerInternal(
      {required int arg, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kSetCurrentMusicPositionForPlayerInternalConstMeta;

  InvokeRet updateCurrentMusicTotalDurationForPlayerInternal(
      {required int arg, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kUpdateCurrentMusicTotalDurationForPlayerInternalConstMeta;

  InvokeRet updateCurrentMusicPlayingForPlayerInternal(
      {required bool arg, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kUpdateCurrentMusicPlayingForPlayerInternalConstMeta;

  InvokeRet handlePlayMusicEventForPlayerInternal(
      {required PlayMusicEventType arg, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kHandlePlayMusicEventForPlayerInternalConstMeta;

  InvokeRet playNextMusic({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPlayNextMusicConstMeta;

  InvokeRet playPreviousMusic({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPlayPreviousMusicConstMeta;

  InvokeRet updateMusicPlaymodeToNext({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUpdateMusicPlaymodeToNextConstMeta;

  InvokeRet updateTimeToPause({required int arg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUpdateTimeToPauseConstMeta;

  InvokeRet removeTimeToPause({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoveTimeToPauseConstMeta;

  InvokeRet prepareImportLyric({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrepareImportLyricConstMeta;

  InvokeRet removeCurrentMusicLyric({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoveCurrentMusicLyricConstMeta;

  InvokeRet changeToCurrentMusicPlaylist({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kChangeToCurrentMusicPlaylistConstMeta;

  InvokeRet prepareEditPlaylist({required PlaylistId arg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrepareEditPlaylistConstMeta;

  InvokeRet finishEditPlaylist({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFinishEditPlaylistConstMeta;

  InvokeRet prepareEditPlaylistCover({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrepareEditPlaylistCoverConstMeta;

  InvokeRet updateEditPlaylistName({required String arg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUpdateEditPlaylistNameConstMeta;

  InvokeRet clearEditPlaylistCover({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kClearEditPlaylistCoverConstMeta;

  InvokeRet prepareImportEntriesInCurrentPlaylist({dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kPrepareImportEntriesInCurrentPlaylistConstMeta;

  InvokeRet finishCreatePlaylist({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFinishCreatePlaylistConstMeta;

  InvokeRet clearCreatePlaylist({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kClearCreatePlaylistConstMeta;

  InvokeRet resetCreatePlaylistFull({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kResetCreatePlaylistFullConstMeta;

  InvokeRet prepareCreatePlaylistCover({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrepareCreatePlaylistCoverConstMeta;

  InvokeRet prepareCreatePlaylistEntries({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrepareCreatePlaylistEntriesConstMeta;

  InvokeRet prepareCreatePlaylist({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrepareCreatePlaylistConstMeta;

  InvokeRet updateCreatePlaylistName({required String arg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUpdateCreatePlaylistNameConstMeta;

  InvokeRet clearCreatePlaylistCover({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kClearCreatePlaylistCoverConstMeta;

  InvokeRet updateCreatePlaylistMode(
      {required CreatePlaylistMode arg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUpdateCreatePlaylistModeConstMeta;

  InvokeRet changeCurrentPlaylist({required PlaylistId arg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kChangeCurrentPlaylistConstMeta;

  InvokeRet removePlaylist({required PlaylistId arg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemovePlaylistConstMeta;

  InvokeRet removeMusicFromCurrentPlaylist(
      {required MusicId arg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoveMusicFromCurrentPlaylistConstMeta;

  InvokeRet playAllMusics({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPlayAllMusicsConstMeta;

  InvokeRet clearEditPlaylistState({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kClearEditPlaylistStateConstMeta;

  InvokeRet updateRootSubkey({required RootRouteSubKey arg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUpdateRootSubkeyConstMeta;

  InvokeRet removeStorage({required StorageId arg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoveStorageConstMeta;

  InvokeRet locateEntry({required String arg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLocateEntryConstMeta;

  InvokeRet selectEntry({required String arg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSelectEntryConstMeta;

  InvokeRet toggleAllCheckedEntries({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kToggleAllCheckedEntriesConstMeta;

  InvokeRet selectStorageInImport({required StorageId arg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSelectStorageInImportConstMeta;

  InvokeRet refreshCurrentStorageInImport({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRefreshCurrentStorageInImportConstMeta;

  InvokeRet finishSelectedEntriesInImport({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFinishSelectedEntriesInImportConstMeta;

  InvokeRet prepareEditStorage({StorageId? arg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrepareEditStorageConstMeta;

  InvokeRet upsertStorage({required ArgUpsertStorage arg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUpsertStorageConstMeta;

  InvokeRet testConnection({required ArgUpsertStorage arg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTestConnectionConstMeta;
}

class ArgInitializeApp {
  final String appDocumentDir;
  final int schemaVersion;
  final String storagePath;

  const ArgInitializeApp({
    required this.appDocumentDir,
    required this.schemaVersion,
    required this.storagePath,
  });
}

class ArgReportPanic {
  final String info;
  final String stackTrace;

  const ArgReportPanic({
    required this.info,
    required this.stackTrace,
  });
}

class ArgSeekMusic {
  final int duration;

  const ArgSeekMusic({
    required this.duration,
  });
}

class ArgUpsertStorage {
  final StorageId? id;
  final String addr;
  final String? alias;
  final String username;
  final String password;
  final bool isAnonymous;
  final StorageType typ;

  const ArgUpsertStorage({
    this.id,
    required this.addr,
    this.alias,
    required this.username,
    required this.password,
    required this.isAnonymous,
    required this.typ,
  });
}

enum CreatePlaylistMode {
  Full,
  Empty,
}

enum CurrentStorageImportType {
  Musics,
  EditPlaylistCover,
  CreatePlaylistEntries,
  CreatePlaylistCover,
  CurrentMusicLyrics,
}

enum CurrentStorageStateType {
  Loading,
  OK,
  NeedPermission,
  AuthenticationFailed,
  Timeout,
  UnknownError,
}

class InvokeRet {
  final RootViewModelState? view;
  final List<ResourceToHostAction> resources;

  const InvokeRet({
    this.view,
    required this.resources,
  });
}

enum LyricLoadState {
  Loading,
  Missing,
  Failed,
  Loaded,
}

class MusicId {
  final int field0;

  const MusicId({
    required this.field0,
  });
}

enum PlayMode {
  Single,
  SingleLoop,
  List,
  ListLoop,
}

enum PlayMusicEventType {
  Complete,
  Loading,
  Loaded,
}

class PlaylistId {
  final int field0;

  const PlaylistId({
    required this.field0,
  });
}

class ResourceToHostAction {
  final int id;
  final Uint8List? buf;

  const ResourceToHostAction({
    required this.id,
    this.buf,
  });
}

enum RootRouteSubKey {
  Playlist,
  Dashboard,
  Setting,
}

class RootViewModelState {
  final VPlaylistListState? playlistList;
  final VCurrentPlaylistState? currentPlaylist;
  final VEditPlaylistState? editPlaylist;
  final VCreatePlaylistState? createPlaylist;
  final VStorageListState? storageList;
  final VCurrentStorageEntriesState? currentStorageEntries;
  final VEditStorageState? editStorage;
  final VCurrentMusicState? currentMusic;
  final VTimeToPauseState? timeToPause;
  final VCurrentMusicLyricState? currentMusicLyric;
  final VRootSubKeyState? currentRouter;

  const RootViewModelState({
    this.playlistList,
    this.currentPlaylist,
    this.editPlaylist,
    this.createPlaylist,
    this.storageList,
    this.currentStorageEntries,
    this.editStorage,
    this.currentMusic,
    this.timeToPause,
    this.currentMusicLyric,
    this.currentRouter,
  });
}

enum StorageConnectionTestResult {
  None,
  Testing,
  Success,
  Unauthorized,
  Timeout,
  OtherError,
}

enum StorageEntryType {
  Folder,
  Music,
  Image,
  Lyric,
  Other,
}

class StorageId {
  final int field0;

  const StorageId({
    required this.field0,
  });
}

enum StorageType {
  Local,
  Webdav,
  Ftp,
}

class VCreatePlaylistState {
  final CreatePlaylistMode mode;
  final String name;
  final int? picture;
  final int musicCount;
  final List<String> recommendPlaylistNames;
  final int preparedSignal;
  final bool fullImported;

  const VCreatePlaylistState({
    required this.mode,
    required this.name,
    this.picture,
    required this.musicCount,
    required this.recommendPlaylistNames,
    required this.preparedSignal,
    required this.fullImported,
  });
}

class VCurrentMusicLyricState {
  final LyricLoadState loadState;
  final List<(int, String)> lyricLines;

  const VCurrentMusicLyricState({
    required this.loadState,
    required this.lyricLines,
  });
}

class VCurrentMusicState {
  final MusicId? id;
  final String title;
  final String currentDuration;
  final String totalDuration;
  final int currentDurationMs;
  final int totalDurationMs;
  final bool canChangePosition;
  final bool canPlayNext;
  final bool canPlayPrevious;
  final int previousCover;
  final int nextCover;
  final int cover;
  final PlayMode playMode;
  final bool playing;
  final int lyricIndex;
  final bool loading;

  const VCurrentMusicState({
    this.id,
    required this.title,
    required this.currentDuration,
    required this.totalDuration,
    required this.currentDurationMs,
    required this.totalDurationMs,
    required this.canChangePosition,
    required this.canPlayNext,
    required this.canPlayPrevious,
    required this.previousCover,
    required this.nextCover,
    required this.cover,
    required this.playMode,
    required this.playing,
    required this.lyricIndex,
    required this.loading,
  });
}

class VCurrentPlaylistState {
  final PlaylistId? id;
  final List<VPlaylistMusicItem> items;
  final String title;
  final String duration;
  final int? picture;
  final int? firstPictureInMusics;

  const VCurrentPlaylistState({
    this.id,
    required this.items,
    required this.title,
    required this.duration,
    this.picture,
    this.firstPictureInMusics,
  });
}

class VCurrentStorageEntriesState {
  final CurrentStorageImportType importType;
  final CurrentStorageStateType stateType;
  final StorageId? currentStorageId;
  final List<VCurrentStorageEntriesStateStorageItem> storageItems;
  final List<VCurrentStorageEntry> entries;
  final int selectedCount;
  final List<VSplitPathItem> splitPaths;
  final String currentPath;
  final bool disabledToggleAll;

  const VCurrentStorageEntriesState({
    required this.importType,
    required this.stateType,
    this.currentStorageId,
    required this.storageItems,
    required this.entries,
    required this.selectedCount,
    required this.splitPaths,
    required this.currentPath,
    required this.disabledToggleAll,
  });
}

class VCurrentStorageEntriesStateStorageItem {
  final StorageId id;
  final String name;
  final String subtitle;
  final bool selected;
  final bool isLocal;

  const VCurrentStorageEntriesStateStorageItem({
    required this.id,
    required this.name,
    required this.subtitle,
    required this.selected,
    required this.isLocal,
  });
}

class VCurrentStorageEntry {
  final String path;
  final String name;
  final bool isFolder;
  final bool canCheck;
  final bool checked;
  final StorageEntryType entryTyp;

  const VCurrentStorageEntry({
    required this.path,
    required this.name,
    required this.isFolder,
    required this.canCheck,
    required this.checked,
    required this.entryTyp,
  });
}

class VEditPlaylistState {
  final int? picture;
  final String name;
  final int preparedSignal;

  const VEditPlaylistState({
    this.picture,
    required this.name,
    required this.preparedSignal,
  });
}

class VEditStorageState {
  final bool isCreated;
  final String title;
  final ArgUpsertStorage info;
  final StorageConnectionTestResult test;
  final int musicCount;
  final int playlistCount;
  final int updateSignal;

  const VEditStorageState({
    required this.isCreated,
    required this.title,
    required this.info,
    required this.test,
    required this.musicCount,
    required this.playlistCount,
    required this.updateSignal,
  });
}

class VPlaylistAbstractItem {
  final PlaylistId id;
  final String title;
  final int count;
  final String duration;
  final int? picture;

  const VPlaylistAbstractItem({
    required this.id,
    required this.title,
    required this.count,
    required this.duration,
    this.picture,
  });
}

class VPlaylistListState {
  final List<VPlaylistAbstractItem> playlistList;

  const VPlaylistListState({
    required this.playlistList,
  });
}

class VPlaylistMusicItem {
  final MusicId id;
  final String title;
  final String duration;

  const VPlaylistMusicItem({
    required this.id,
    required this.title,
    required this.duration,
  });
}

class VRootSubKeyState {
  final RootRouteSubKey subkey;

  const VRootSubKeyState({
    required this.subkey,
  });
}

class VSplitPathItem {
  final String path;
  final String name;

  const VSplitPathItem({
    required this.path,
    required this.name,
  });
}

class VStorageListItem {
  final StorageId storageId;
  final String name;
  final String subTitle;
  final StorageType typ;

  const VStorageListItem({
    required this.storageId,
    required this.name,
    required this.subTitle,
    required this.typ,
  });
}

class VStorageListState {
  final List<VStorageListItem> items;

  const VStorageListState({
    required this.items,
  });
}

class VTimeToPauseState {
  final bool enabled;
  final int leftHour;
  final int leftMinute;

  const VTimeToPauseState({
    required this.enabled,
    required this.leftHour,
    required this.leftMinute,
  });
}

class EaseClientImpl implements EaseClient {
  final EaseClientPlatform _platform;
  factory EaseClientImpl(ExternalLibrary dylib) =>
      EaseClientImpl.raw(EaseClientPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory EaseClientImpl.wasm(FutureOr<WasmModule> module) =>
      EaseClientImpl(module as ExternalLibrary);
  EaseClientImpl.raw(this._platform);
  Stream<ArgReportPanic> initBindReportPanic({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init_bind_report_panic(port_),
      parseSuccessData: _wire2api_arg_report_panic,
      parseErrorData: null,
      constMeta: kInitBindReportPanicConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitBindReportPanicConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_bind_report_panic",
        argNames: [],
      );

  Stream<void> initNotifySchedule({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init_notify_schedule(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kInitNotifyScheduleConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitNotifyScheduleConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_notify_schedule",
        argNames: [],
      );

  Stream<void> initBindResumeMusic({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init_bind_resume_music(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kInitBindResumeMusicConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitBindResumeMusicConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_bind_resume_music",
        argNames: [],
      );

  Stream<void> initBindPauseMusic({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init_bind_pause_music(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kInitBindPauseMusicConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitBindPauseMusicConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_bind_pause_music",
        argNames: [],
      );

  Stream<void> initBindStopMusic({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init_bind_stop_music(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kInitBindStopMusicConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitBindStopMusicConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_bind_stop_music",
        argNames: [],
      );

  Stream<int> initSeekMusic({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init_seek_music(port_),
      parseSuccessData: _wire2api_u64,
      parseErrorData: null,
      constMeta: kInitSeekMusicConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitSeekMusicConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_seek_music",
        argNames: [],
      );

  Stream<String> setMusicUrl({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_music_url(port_),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kSetMusicUrlConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetMusicUrlConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_music_url",
        argNames: [],
      );

  Stream<String> bindToastError({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_bind_toast_error(port_),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kBindToastErrorConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBindToastErrorConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "bind_toast_error",
        argNames: [],
      );

  InvokeRet initializeClient({required ArgInitializeApp arg, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_arg_initialize_app(arg);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_initialize_client(arg0),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kInitializeClientConstMeta,
      argValues: [arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitializeClientConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "initialize_client",
        argNames: ["arg"],
      );

  InvokeRet flushSchedule({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_flush_schedule(),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kFlushScheduleConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFlushScheduleConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "flush_schedule",
        argNames: [],
      );

  InvokeRet initializeApp({required ArgInitializeApp arg, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_arg_initialize_app(arg);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_initialize_app(arg0),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kInitializeAppConstMeta,
      argValues: [arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitializeAppConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "initialize_app",
        argNames: ["arg"],
      );

  InvokeRet updateStoragePermission({required bool arg, dynamic hint}) {
    var arg0 = arg;
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_update_storage_permission(arg0),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kUpdateStoragePermissionConstMeta,
      argValues: [arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUpdateStoragePermissionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "update_storage_permission",
        argNames: ["arg"],
      );

  InvokeRet playMusic({required MusicId arg, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_music_id(arg);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_play_music(arg0),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kPlayMusicConstMeta,
      argValues: [arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPlayMusicConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "play_music",
        argNames: ["arg"],
      );

  InvokeRet pauseMusic({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_pause_music(),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kPauseMusicConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPauseMusicConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "pause_music",
        argNames: [],
      );

  InvokeRet resumeMusic({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_resume_music(),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kResumeMusicConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kResumeMusicConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "resume_music",
        argNames: [],
      );

  InvokeRet stopMusic({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_stop_music(),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kStopMusicConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStopMusicConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "stop_music",
        argNames: [],
      );

  InvokeRet seekMusic({required ArgSeekMusic arg, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_arg_seek_music(arg);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_seek_music(arg0),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kSeekMusicConstMeta,
      argValues: [arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSeekMusicConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "seek_music",
        argNames: ["arg"],
      );

  InvokeRet setCurrentMusicPositionForPlayerInternal(
      {required int arg, dynamic hint}) {
    var arg0 = _platform.api2wire_u64(arg);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_set_current_music_position_for_player_internal(arg0),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kSetCurrentMusicPositionForPlayerInternalConstMeta,
      argValues: [arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSetCurrentMusicPositionForPlayerInternalConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "set_current_music_position_for_player_internal",
            argNames: ["arg"],
          );

  InvokeRet updateCurrentMusicTotalDurationForPlayerInternal(
      {required int arg, dynamic hint}) {
    var arg0 = _platform.api2wire_u64(arg);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_update_current_music_total_duration_for_player_internal(arg0),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kUpdateCurrentMusicTotalDurationForPlayerInternalConstMeta,
      argValues: [arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kUpdateCurrentMusicTotalDurationForPlayerInternalConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName:
                "update_current_music_total_duration_for_player_internal",
            argNames: ["arg"],
          );

  InvokeRet updateCurrentMusicPlayingForPlayerInternal(
      {required bool arg, dynamic hint}) {
    var arg0 = arg;
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_update_current_music_playing_for_player_internal(arg0),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kUpdateCurrentMusicPlayingForPlayerInternalConstMeta,
      argValues: [arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kUpdateCurrentMusicPlayingForPlayerInternalConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "update_current_music_playing_for_player_internal",
            argNames: ["arg"],
          );

  InvokeRet handlePlayMusicEventForPlayerInternal(
      {required PlayMusicEventType arg, dynamic hint}) {
    var arg0 = api2wire_play_music_event_type(arg);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_handle_play_music_event_for_player_internal(arg0),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kHandlePlayMusicEventForPlayerInternalConstMeta,
      argValues: [arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kHandlePlayMusicEventForPlayerInternalConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "handle_play_music_event_for_player_internal",
            argNames: ["arg"],
          );

  InvokeRet playNextMusic({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_play_next_music(),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kPlayNextMusicConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPlayNextMusicConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "play_next_music",
        argNames: [],
      );

  InvokeRet playPreviousMusic({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_play_previous_music(),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kPlayPreviousMusicConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPlayPreviousMusicConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "play_previous_music",
        argNames: [],
      );

  InvokeRet updateMusicPlaymodeToNext({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_update_music_playmode_to_next(),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kUpdateMusicPlaymodeToNextConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUpdateMusicPlaymodeToNextConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "update_music_playmode_to_next",
        argNames: [],
      );

  InvokeRet updateTimeToPause({required int arg, dynamic hint}) {
    var arg0 = _platform.api2wire_u64(arg);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_update_time_to_pause(arg0),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kUpdateTimeToPauseConstMeta,
      argValues: [arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUpdateTimeToPauseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "update_time_to_pause",
        argNames: ["arg"],
      );

  InvokeRet removeTimeToPause({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_remove_time_to_pause(),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kRemoveTimeToPauseConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoveTimeToPauseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remove_time_to_pause",
        argNames: [],
      );

  InvokeRet prepareImportLyric({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_prepare_import_lyric(),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kPrepareImportLyricConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPrepareImportLyricConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "prepare_import_lyric",
        argNames: [],
      );

  InvokeRet removeCurrentMusicLyric({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_remove_current_music_lyric(),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kRemoveCurrentMusicLyricConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoveCurrentMusicLyricConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remove_current_music_lyric",
        argNames: [],
      );

  InvokeRet changeToCurrentMusicPlaylist({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_change_to_current_music_playlist(),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kChangeToCurrentMusicPlaylistConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kChangeToCurrentMusicPlaylistConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "change_to_current_music_playlist",
        argNames: [],
      );

  InvokeRet prepareEditPlaylist({required PlaylistId arg, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_playlist_id(arg);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_prepare_edit_playlist(arg0),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kPrepareEditPlaylistConstMeta,
      argValues: [arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPrepareEditPlaylistConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "prepare_edit_playlist",
        argNames: ["arg"],
      );

  InvokeRet finishEditPlaylist({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_finish_edit_playlist(),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kFinishEditPlaylistConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFinishEditPlaylistConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "finish_edit_playlist",
        argNames: [],
      );

  InvokeRet prepareEditPlaylistCover({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_prepare_edit_playlist_cover(),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kPrepareEditPlaylistCoverConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPrepareEditPlaylistCoverConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "prepare_edit_playlist_cover",
        argNames: [],
      );

  InvokeRet updateEditPlaylistName({required String arg, dynamic hint}) {
    var arg0 = _platform.api2wire_String(arg);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_update_edit_playlist_name(arg0),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kUpdateEditPlaylistNameConstMeta,
      argValues: [arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUpdateEditPlaylistNameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "update_edit_playlist_name",
        argNames: ["arg"],
      );

  InvokeRet clearEditPlaylistCover({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_clear_edit_playlist_cover(),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kClearEditPlaylistCoverConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kClearEditPlaylistCoverConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "clear_edit_playlist_cover",
        argNames: [],
      );

  InvokeRet prepareImportEntriesInCurrentPlaylist({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_prepare_import_entries_in_current_playlist(),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kPrepareImportEntriesInCurrentPlaylistConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kPrepareImportEntriesInCurrentPlaylistConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "prepare_import_entries_in_current_playlist",
            argNames: [],
          );

  InvokeRet finishCreatePlaylist({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_finish_create_playlist(),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kFinishCreatePlaylistConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFinishCreatePlaylistConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "finish_create_playlist",
        argNames: [],
      );

  InvokeRet clearCreatePlaylist({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_clear_create_playlist(),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kClearCreatePlaylistConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kClearCreatePlaylistConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "clear_create_playlist",
        argNames: [],
      );

  InvokeRet resetCreatePlaylistFull({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_reset_create_playlist_full(),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kResetCreatePlaylistFullConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kResetCreatePlaylistFullConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "reset_create_playlist_full",
        argNames: [],
      );

  InvokeRet prepareCreatePlaylistCover({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_prepare_create_playlist_cover(),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kPrepareCreatePlaylistCoverConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPrepareCreatePlaylistCoverConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "prepare_create_playlist_cover",
        argNames: [],
      );

  InvokeRet prepareCreatePlaylistEntries({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_prepare_create_playlist_entries(),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kPrepareCreatePlaylistEntriesConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPrepareCreatePlaylistEntriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "prepare_create_playlist_entries",
        argNames: [],
      );

  InvokeRet prepareCreatePlaylist({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_prepare_create_playlist(),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kPrepareCreatePlaylistConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPrepareCreatePlaylistConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "prepare_create_playlist",
        argNames: [],
      );

  InvokeRet updateCreatePlaylistName({required String arg, dynamic hint}) {
    var arg0 = _platform.api2wire_String(arg);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_update_create_playlist_name(arg0),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kUpdateCreatePlaylistNameConstMeta,
      argValues: [arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUpdateCreatePlaylistNameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "update_create_playlist_name",
        argNames: ["arg"],
      );

  InvokeRet clearCreatePlaylistCover({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_clear_create_playlist_cover(),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kClearCreatePlaylistCoverConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kClearCreatePlaylistCoverConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "clear_create_playlist_cover",
        argNames: [],
      );

  InvokeRet updateCreatePlaylistMode(
      {required CreatePlaylistMode arg, dynamic hint}) {
    var arg0 = api2wire_create_playlist_mode(arg);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_update_create_playlist_mode(arg0),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kUpdateCreatePlaylistModeConstMeta,
      argValues: [arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUpdateCreatePlaylistModeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "update_create_playlist_mode",
        argNames: ["arg"],
      );

  InvokeRet changeCurrentPlaylist({required PlaylistId arg, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_playlist_id(arg);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_change_current_playlist(arg0),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kChangeCurrentPlaylistConstMeta,
      argValues: [arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kChangeCurrentPlaylistConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "change_current_playlist",
        argNames: ["arg"],
      );

  InvokeRet removePlaylist({required PlaylistId arg, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_playlist_id(arg);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_remove_playlist(arg0),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kRemovePlaylistConstMeta,
      argValues: [arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemovePlaylistConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remove_playlist",
        argNames: ["arg"],
      );

  InvokeRet removeMusicFromCurrentPlaylist(
      {required MusicId arg, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_music_id(arg);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_remove_music_from_current_playlist(arg0),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kRemoveMusicFromCurrentPlaylistConstMeta,
      argValues: [arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoveMusicFromCurrentPlaylistConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remove_music_from_current_playlist",
        argNames: ["arg"],
      );

  InvokeRet playAllMusics({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_play_all_musics(),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kPlayAllMusicsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPlayAllMusicsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "play_all_musics",
        argNames: [],
      );

  InvokeRet clearEditPlaylistState({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_clear_edit_playlist_state(),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kClearEditPlaylistStateConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kClearEditPlaylistStateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "clear_edit_playlist_state",
        argNames: [],
      );

  InvokeRet updateRootSubkey({required RootRouteSubKey arg, dynamic hint}) {
    var arg0 = api2wire_root_route_sub_key(arg);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_update_root_subkey(arg0),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kUpdateRootSubkeyConstMeta,
      argValues: [arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUpdateRootSubkeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "update_root_subkey",
        argNames: ["arg"],
      );

  InvokeRet removeStorage({required StorageId arg, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_storage_id(arg);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_remove_storage(arg0),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kRemoveStorageConstMeta,
      argValues: [arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoveStorageConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remove_storage",
        argNames: ["arg"],
      );

  InvokeRet locateEntry({required String arg, dynamic hint}) {
    var arg0 = _platform.api2wire_String(arg);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_locate_entry(arg0),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kLocateEntryConstMeta,
      argValues: [arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLocateEntryConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "locate_entry",
        argNames: ["arg"],
      );

  InvokeRet selectEntry({required String arg, dynamic hint}) {
    var arg0 = _platform.api2wire_String(arg);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_select_entry(arg0),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kSelectEntryConstMeta,
      argValues: [arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSelectEntryConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "select_entry",
        argNames: ["arg"],
      );

  InvokeRet toggleAllCheckedEntries({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_toggle_all_checked_entries(),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kToggleAllCheckedEntriesConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kToggleAllCheckedEntriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "toggle_all_checked_entries",
        argNames: [],
      );

  InvokeRet selectStorageInImport({required StorageId arg, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_storage_id(arg);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_select_storage_in_import(arg0),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kSelectStorageInImportConstMeta,
      argValues: [arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSelectStorageInImportConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "select_storage_in_import",
        argNames: ["arg"],
      );

  InvokeRet refreshCurrentStorageInImport({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_refresh_current_storage_in_import(),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kRefreshCurrentStorageInImportConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRefreshCurrentStorageInImportConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "refresh_current_storage_in_import",
        argNames: [],
      );

  InvokeRet finishSelectedEntriesInImport({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_finish_selected_entries_in_import(),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kFinishSelectedEntriesInImportConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFinishSelectedEntriesInImportConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "finish_selected_entries_in_import",
        argNames: [],
      );

  InvokeRet prepareEditStorage({StorageId? arg, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_box_autoadd_storage_id(arg);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_prepare_edit_storage(arg0),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kPrepareEditStorageConstMeta,
      argValues: [arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPrepareEditStorageConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "prepare_edit_storage",
        argNames: ["arg"],
      );

  InvokeRet upsertStorage({required ArgUpsertStorage arg, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_arg_upsert_storage(arg);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_upsert_storage(arg0),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kUpsertStorageConstMeta,
      argValues: [arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUpsertStorageConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "upsert_storage",
        argNames: ["arg"],
      );

  InvokeRet testConnection({required ArgUpsertStorage arg, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_arg_upsert_storage(arg);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_test_connection(arg0),
      parseSuccessData: _wire2api_invoke_ret,
      parseErrorData: _wire2api_String,
      constMeta: kTestConnectionConstMeta,
      argValues: [arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestConnectionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "test_connection",
        argNames: ["arg"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  (int, String) _wire2api___record__u64_String(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      _wire2api_u64(arr[0]),
      _wire2api_String(arr[1]),
    );
  }

  ArgReportPanic _wire2api_arg_report_panic(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ArgReportPanic(
      info: _wire2api_String(arr[0]),
      stackTrace: _wire2api_String(arr[1]),
    );
  }

  ArgUpsertStorage _wire2api_arg_upsert_storage(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return ArgUpsertStorage(
      id: _wire2api_opt_box_autoadd_storage_id(arr[0]),
      addr: _wire2api_String(arr[1]),
      alias: _wire2api_opt_String(arr[2]),
      username: _wire2api_String(arr[3]),
      password: _wire2api_String(arr[4]),
      isAnonymous: _wire2api_bool(arr[5]),
      typ: _wire2api_storage_type(arr[6]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  MusicId _wire2api_box_autoadd_music_id(dynamic raw) {
    return _wire2api_music_id(raw);
  }

  PlaylistId _wire2api_box_autoadd_playlist_id(dynamic raw) {
    return _wire2api_playlist_id(raw);
  }

  RootViewModelState _wire2api_box_autoadd_root_view_model_state(dynamic raw) {
    return _wire2api_root_view_model_state(raw);
  }

  StorageId _wire2api_box_autoadd_storage_id(dynamic raw) {
    return _wire2api_storage_id(raw);
  }

  int _wire2api_box_autoadd_u64(dynamic raw) {
    return _wire2api_u64(raw);
  }

  VCreatePlaylistState _wire2api_box_autoadd_v_create_playlist_state(
      dynamic raw) {
    return _wire2api_v_create_playlist_state(raw);
  }

  VCurrentMusicLyricState _wire2api_box_autoadd_v_current_music_lyric_state(
      dynamic raw) {
    return _wire2api_v_current_music_lyric_state(raw);
  }

  VCurrentMusicState _wire2api_box_autoadd_v_current_music_state(dynamic raw) {
    return _wire2api_v_current_music_state(raw);
  }

  VCurrentPlaylistState _wire2api_box_autoadd_v_current_playlist_state(
      dynamic raw) {
    return _wire2api_v_current_playlist_state(raw);
  }

  VCurrentStorageEntriesState
      _wire2api_box_autoadd_v_current_storage_entries_state(dynamic raw) {
    return _wire2api_v_current_storage_entries_state(raw);
  }

  VEditPlaylistState _wire2api_box_autoadd_v_edit_playlist_state(dynamic raw) {
    return _wire2api_v_edit_playlist_state(raw);
  }

  VEditStorageState _wire2api_box_autoadd_v_edit_storage_state(dynamic raw) {
    return _wire2api_v_edit_storage_state(raw);
  }

  VPlaylistListState _wire2api_box_autoadd_v_playlist_list_state(dynamic raw) {
    return _wire2api_v_playlist_list_state(raw);
  }

  VRootSubKeyState _wire2api_box_autoadd_v_root_sub_key_state(dynamic raw) {
    return _wire2api_v_root_sub_key_state(raw);
  }

  VStorageListState _wire2api_box_autoadd_v_storage_list_state(dynamic raw) {
    return _wire2api_v_storage_list_state(raw);
  }

  VTimeToPauseState _wire2api_box_autoadd_v_time_to_pause_state(dynamic raw) {
    return _wire2api_v_time_to_pause_state(raw);
  }

  CreatePlaylistMode _wire2api_create_playlist_mode(dynamic raw) {
    return CreatePlaylistMode.values[raw as int];
  }

  CurrentStorageImportType _wire2api_current_storage_import_type(dynamic raw) {
    return CurrentStorageImportType.values[raw as int];
  }

  CurrentStorageStateType _wire2api_current_storage_state_type(dynamic raw) {
    return CurrentStorageStateType.values[raw as int];
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  InvokeRet _wire2api_invoke_ret(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return InvokeRet(
      view: _wire2api_opt_box_autoadd_root_view_model_state(arr[0]),
      resources: _wire2api_list_resource_to_host_action(arr[1]),
    );
  }

  List<(int, String)> _wire2api_list___record__u64_String(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api___record__u64_String).toList();
  }

  List<ResourceToHostAction> _wire2api_list_resource_to_host_action(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_wire2api_resource_to_host_action)
        .toList();
  }

  List<VCurrentStorageEntriesStateStorageItem>
      _wire2api_list_v_current_storage_entries_state_storage_item(dynamic raw) {
    return (raw as List<dynamic>)
        .map(_wire2api_v_current_storage_entries_state_storage_item)
        .toList();
  }

  List<VCurrentStorageEntry> _wire2api_list_v_current_storage_entry(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_wire2api_v_current_storage_entry)
        .toList();
  }

  List<VPlaylistAbstractItem> _wire2api_list_v_playlist_abstract_item(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_wire2api_v_playlist_abstract_item)
        .toList();
  }

  List<VPlaylistMusicItem> _wire2api_list_v_playlist_music_item(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_v_playlist_music_item).toList();
  }

  List<VSplitPathItem> _wire2api_list_v_split_path_item(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_v_split_path_item).toList();
  }

  List<VStorageListItem> _wire2api_list_v_storage_list_item(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_v_storage_list_item).toList();
  }

  LyricLoadState _wire2api_lyric_load_state(dynamic raw) {
    return LyricLoadState.values[raw as int];
  }

  MusicId _wire2api_music_id(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MusicId(
      field0: _wire2api_i64(arr[0]),
    );
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  MusicId? _wire2api_opt_box_autoadd_music_id(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_music_id(raw);
  }

  PlaylistId? _wire2api_opt_box_autoadd_playlist_id(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_playlist_id(raw);
  }

  RootViewModelState? _wire2api_opt_box_autoadd_root_view_model_state(
      dynamic raw) {
    return raw == null
        ? null
        : _wire2api_box_autoadd_root_view_model_state(raw);
  }

  StorageId? _wire2api_opt_box_autoadd_storage_id(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_storage_id(raw);
  }

  int? _wire2api_opt_box_autoadd_u64(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_u64(raw);
  }

  VCreatePlaylistState? _wire2api_opt_box_autoadd_v_create_playlist_state(
      dynamic raw) {
    return raw == null
        ? null
        : _wire2api_box_autoadd_v_create_playlist_state(raw);
  }

  VCurrentMusicLyricState?
      _wire2api_opt_box_autoadd_v_current_music_lyric_state(dynamic raw) {
    return raw == null
        ? null
        : _wire2api_box_autoadd_v_current_music_lyric_state(raw);
  }

  VCurrentMusicState? _wire2api_opt_box_autoadd_v_current_music_state(
      dynamic raw) {
    return raw == null
        ? null
        : _wire2api_box_autoadd_v_current_music_state(raw);
  }

  VCurrentPlaylistState? _wire2api_opt_box_autoadd_v_current_playlist_state(
      dynamic raw) {
    return raw == null
        ? null
        : _wire2api_box_autoadd_v_current_playlist_state(raw);
  }

  VCurrentStorageEntriesState?
      _wire2api_opt_box_autoadd_v_current_storage_entries_state(dynamic raw) {
    return raw == null
        ? null
        : _wire2api_box_autoadd_v_current_storage_entries_state(raw);
  }

  VEditPlaylistState? _wire2api_opt_box_autoadd_v_edit_playlist_state(
      dynamic raw) {
    return raw == null
        ? null
        : _wire2api_box_autoadd_v_edit_playlist_state(raw);
  }

  VEditStorageState? _wire2api_opt_box_autoadd_v_edit_storage_state(
      dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_v_edit_storage_state(raw);
  }

  VPlaylistListState? _wire2api_opt_box_autoadd_v_playlist_list_state(
      dynamic raw) {
    return raw == null
        ? null
        : _wire2api_box_autoadd_v_playlist_list_state(raw);
  }

  VRootSubKeyState? _wire2api_opt_box_autoadd_v_root_sub_key_state(
      dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_v_root_sub_key_state(raw);
  }

  VStorageListState? _wire2api_opt_box_autoadd_v_storage_list_state(
      dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_v_storage_list_state(raw);
  }

  VTimeToPauseState? _wire2api_opt_box_autoadd_v_time_to_pause_state(
      dynamic raw) {
    return raw == null
        ? null
        : _wire2api_box_autoadd_v_time_to_pause_state(raw);
  }

  Uint8List? _wire2api_opt_uint_8_list(dynamic raw) {
    return raw == null ? null : _wire2api_uint_8_list(raw);
  }

  PlayMode _wire2api_play_mode(dynamic raw) {
    return PlayMode.values[raw as int];
  }

  PlaylistId _wire2api_playlist_id(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return PlaylistId(
      field0: _wire2api_i64(arr[0]),
    );
  }

  ResourceToHostAction _wire2api_resource_to_host_action(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ResourceToHostAction(
      id: _wire2api_u64(arr[0]),
      buf: _wire2api_opt_uint_8_list(arr[1]),
    );
  }

  RootRouteSubKey _wire2api_root_route_sub_key(dynamic raw) {
    return RootRouteSubKey.values[raw as int];
  }

  RootViewModelState _wire2api_root_view_model_state(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return RootViewModelState(
      playlistList: _wire2api_opt_box_autoadd_v_playlist_list_state(arr[0]),
      currentPlaylist:
          _wire2api_opt_box_autoadd_v_current_playlist_state(arr[1]),
      editPlaylist: _wire2api_opt_box_autoadd_v_edit_playlist_state(arr[2]),
      createPlaylist: _wire2api_opt_box_autoadd_v_create_playlist_state(arr[3]),
      storageList: _wire2api_opt_box_autoadd_v_storage_list_state(arr[4]),
      currentStorageEntries:
          _wire2api_opt_box_autoadd_v_current_storage_entries_state(arr[5]),
      editStorage: _wire2api_opt_box_autoadd_v_edit_storage_state(arr[6]),
      currentMusic: _wire2api_opt_box_autoadd_v_current_music_state(arr[7]),
      timeToPause: _wire2api_opt_box_autoadd_v_time_to_pause_state(arr[8]),
      currentMusicLyric:
          _wire2api_opt_box_autoadd_v_current_music_lyric_state(arr[9]),
      currentRouter: _wire2api_opt_box_autoadd_v_root_sub_key_state(arr[10]),
    );
  }

  StorageConnectionTestResult _wire2api_storage_connection_test_result(
      dynamic raw) {
    return StorageConnectionTestResult.values[raw as int];
  }

  StorageEntryType _wire2api_storage_entry_type(dynamic raw) {
    return StorageEntryType.values[raw as int];
  }

  StorageId _wire2api_storage_id(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StorageId(
      field0: _wire2api_i64(arr[0]),
    );
  }

  StorageType _wire2api_storage_type(dynamic raw) {
    return StorageType.values[raw as int];
  }

  int _wire2api_u16(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  int _wire2api_usize(dynamic raw) {
    return castInt(raw);
  }

  VCreatePlaylistState _wire2api_v_create_playlist_state(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return VCreatePlaylistState(
      mode: _wire2api_create_playlist_mode(arr[0]),
      name: _wire2api_String(arr[1]),
      picture: _wire2api_opt_box_autoadd_u64(arr[2]),
      musicCount: _wire2api_u32(arr[3]),
      recommendPlaylistNames: _wire2api_StringList(arr[4]),
      preparedSignal: _wire2api_u16(arr[5]),
      fullImported: _wire2api_bool(arr[6]),
    );
  }

  VCurrentMusicLyricState _wire2api_v_current_music_lyric_state(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return VCurrentMusicLyricState(
      loadState: _wire2api_lyric_load_state(arr[0]),
      lyricLines: _wire2api_list___record__u64_String(arr[1]),
    );
  }

  VCurrentMusicState _wire2api_v_current_music_state(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 16)
      throw Exception('unexpected arr length: expect 16 but see ${arr.length}');
    return VCurrentMusicState(
      id: _wire2api_opt_box_autoadd_music_id(arr[0]),
      title: _wire2api_String(arr[1]),
      currentDuration: _wire2api_String(arr[2]),
      totalDuration: _wire2api_String(arr[3]),
      currentDurationMs: _wire2api_u64(arr[4]),
      totalDurationMs: _wire2api_u64(arr[5]),
      canChangePosition: _wire2api_bool(arr[6]),
      canPlayNext: _wire2api_bool(arr[7]),
      canPlayPrevious: _wire2api_bool(arr[8]),
      previousCover: _wire2api_u64(arr[9]),
      nextCover: _wire2api_u64(arr[10]),
      cover: _wire2api_u64(arr[11]),
      playMode: _wire2api_play_mode(arr[12]),
      playing: _wire2api_bool(arr[13]),
      lyricIndex: _wire2api_i32(arr[14]),
      loading: _wire2api_bool(arr[15]),
    );
  }

  VCurrentPlaylistState _wire2api_v_current_playlist_state(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return VCurrentPlaylistState(
      id: _wire2api_opt_box_autoadd_playlist_id(arr[0]),
      items: _wire2api_list_v_playlist_music_item(arr[1]),
      title: _wire2api_String(arr[2]),
      duration: _wire2api_String(arr[3]),
      picture: _wire2api_opt_box_autoadd_u64(arr[4]),
      firstPictureInMusics: _wire2api_opt_box_autoadd_u64(arr[5]),
    );
  }

  VCurrentStorageEntriesState _wire2api_v_current_storage_entries_state(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return VCurrentStorageEntriesState(
      importType: _wire2api_current_storage_import_type(arr[0]),
      stateType: _wire2api_current_storage_state_type(arr[1]),
      currentStorageId: _wire2api_opt_box_autoadd_storage_id(arr[2]),
      storageItems:
          _wire2api_list_v_current_storage_entries_state_storage_item(arr[3]),
      entries: _wire2api_list_v_current_storage_entry(arr[4]),
      selectedCount: _wire2api_i32(arr[5]),
      splitPaths: _wire2api_list_v_split_path_item(arr[6]),
      currentPath: _wire2api_String(arr[7]),
      disabledToggleAll: _wire2api_bool(arr[8]),
    );
  }

  VCurrentStorageEntriesStateStorageItem
      _wire2api_v_current_storage_entries_state_storage_item(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return VCurrentStorageEntriesStateStorageItem(
      id: _wire2api_storage_id(arr[0]),
      name: _wire2api_String(arr[1]),
      subtitle: _wire2api_String(arr[2]),
      selected: _wire2api_bool(arr[3]),
      isLocal: _wire2api_bool(arr[4]),
    );
  }

  VCurrentStorageEntry _wire2api_v_current_storage_entry(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return VCurrentStorageEntry(
      path: _wire2api_String(arr[0]),
      name: _wire2api_String(arr[1]),
      isFolder: _wire2api_bool(arr[2]),
      canCheck: _wire2api_bool(arr[3]),
      checked: _wire2api_bool(arr[4]),
      entryTyp: _wire2api_storage_entry_type(arr[5]),
    );
  }

  VEditPlaylistState _wire2api_v_edit_playlist_state(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return VEditPlaylistState(
      picture: _wire2api_opt_box_autoadd_u64(arr[0]),
      name: _wire2api_String(arr[1]),
      preparedSignal: _wire2api_u16(arr[2]),
    );
  }

  VEditStorageState _wire2api_v_edit_storage_state(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return VEditStorageState(
      isCreated: _wire2api_bool(arr[0]),
      title: _wire2api_String(arr[1]),
      info: _wire2api_arg_upsert_storage(arr[2]),
      test: _wire2api_storage_connection_test_result(arr[3]),
      musicCount: _wire2api_usize(arr[4]),
      playlistCount: _wire2api_usize(arr[5]),
      updateSignal: _wire2api_u16(arr[6]),
    );
  }

  VPlaylistAbstractItem _wire2api_v_playlist_abstract_item(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return VPlaylistAbstractItem(
      id: _wire2api_playlist_id(arr[0]),
      title: _wire2api_String(arr[1]),
      count: _wire2api_i32(arr[2]),
      duration: _wire2api_String(arr[3]),
      picture: _wire2api_opt_box_autoadd_u64(arr[4]),
    );
  }

  VPlaylistListState _wire2api_v_playlist_list_state(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return VPlaylistListState(
      playlistList: _wire2api_list_v_playlist_abstract_item(arr[0]),
    );
  }

  VPlaylistMusicItem _wire2api_v_playlist_music_item(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return VPlaylistMusicItem(
      id: _wire2api_music_id(arr[0]),
      title: _wire2api_String(arr[1]),
      duration: _wire2api_String(arr[2]),
    );
  }

  VRootSubKeyState _wire2api_v_root_sub_key_state(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return VRootSubKeyState(
      subkey: _wire2api_root_route_sub_key(arr[0]),
    );
  }

  VSplitPathItem _wire2api_v_split_path_item(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return VSplitPathItem(
      path: _wire2api_String(arr[0]),
      name: _wire2api_String(arr[1]),
    );
  }

  VStorageListItem _wire2api_v_storage_list_item(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return VStorageListItem(
      storageId: _wire2api_storage_id(arr[0]),
      name: _wire2api_String(arr[1]),
      subTitle: _wire2api_String(arr[2]),
      typ: _wire2api_storage_type(arr[3]),
    );
  }

  VStorageListState _wire2api_v_storage_list_state(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return VStorageListState(
      items: _wire2api_list_v_storage_list_item(arr[0]),
    );
  }

  VTimeToPauseState _wire2api_v_time_to_pause_state(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return VTimeToPauseState(
      enabled: _wire2api_bool(arr[0]),
      leftHour: _wire2api_u64(arr[1]),
      leftMinute: _wire2api_u64(arr[2]),
    );
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
int api2wire_create_playlist_mode(CreatePlaylistMode raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_play_music_event_type(PlayMusicEventType raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_root_route_sub_key(RootRouteSubKey raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_storage_type(StorageType raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class EaseClientPlatform extends FlutterRustBridgeBase<EaseClientWire> {
  EaseClientPlatform(ffi.DynamicLibrary dylib) : super(EaseClientWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_ArgInitializeApp> api2wire_box_autoadd_arg_initialize_app(
      ArgInitializeApp raw) {
    final ptr = inner.new_box_autoadd_arg_initialize_app_0();
    _api_fill_to_wire_arg_initialize_app(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ArgSeekMusic> api2wire_box_autoadd_arg_seek_music(
      ArgSeekMusic raw) {
    final ptr = inner.new_box_autoadd_arg_seek_music_0();
    _api_fill_to_wire_arg_seek_music(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ArgUpsertStorage> api2wire_box_autoadd_arg_upsert_storage(
      ArgUpsertStorage raw) {
    final ptr = inner.new_box_autoadd_arg_upsert_storage_0();
    _api_fill_to_wire_arg_upsert_storage(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_MusicId> api2wire_box_autoadd_music_id(MusicId raw) {
    final ptr = inner.new_box_autoadd_music_id_0();
    _api_fill_to_wire_music_id(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_PlaylistId> api2wire_box_autoadd_playlist_id(
      PlaylistId raw) {
    final ptr = inner.new_box_autoadd_playlist_id_0();
    _api_fill_to_wire_playlist_id(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_StorageId> api2wire_box_autoadd_storage_id(StorageId raw) {
    final ptr = inner.new_box_autoadd_storage_id_0();
    _api_fill_to_wire_storage_id(raw, ptr.ref);
    return ptr;
  }

  @protected
  int api2wire_i64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<wire_StorageId> api2wire_opt_box_autoadd_storage_id(
      StorageId? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_storage_id(raw);
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_arg_initialize_app(
      ArgInitializeApp apiObj, wire_ArgInitializeApp wireObj) {
    wireObj.app_document_dir = api2wire_String(apiObj.appDocumentDir);
    wireObj.schema_version = api2wire_u32(apiObj.schemaVersion);
    wireObj.storage_path = api2wire_String(apiObj.storagePath);
  }

  void _api_fill_to_wire_arg_seek_music(
      ArgSeekMusic apiObj, wire_ArgSeekMusic wireObj) {
    wireObj.duration = api2wire_u64(apiObj.duration);
  }

  void _api_fill_to_wire_arg_upsert_storage(
      ArgUpsertStorage apiObj, wire_ArgUpsertStorage wireObj) {
    wireObj.id = api2wire_opt_box_autoadd_storage_id(apiObj.id);
    wireObj.addr = api2wire_String(apiObj.addr);
    wireObj.alias = api2wire_opt_String(apiObj.alias);
    wireObj.username = api2wire_String(apiObj.username);
    wireObj.password = api2wire_String(apiObj.password);
    wireObj.is_anonymous = api2wire_bool(apiObj.isAnonymous);
    wireObj.typ = api2wire_storage_type(apiObj.typ);
  }

  void _api_fill_to_wire_box_autoadd_arg_initialize_app(
      ArgInitializeApp apiObj, ffi.Pointer<wire_ArgInitializeApp> wireObj) {
    _api_fill_to_wire_arg_initialize_app(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_arg_seek_music(
      ArgSeekMusic apiObj, ffi.Pointer<wire_ArgSeekMusic> wireObj) {
    _api_fill_to_wire_arg_seek_music(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_arg_upsert_storage(
      ArgUpsertStorage apiObj, ffi.Pointer<wire_ArgUpsertStorage> wireObj) {
    _api_fill_to_wire_arg_upsert_storage(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_music_id(
      MusicId apiObj, ffi.Pointer<wire_MusicId> wireObj) {
    _api_fill_to_wire_music_id(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_playlist_id(
      PlaylistId apiObj, ffi.Pointer<wire_PlaylistId> wireObj) {
    _api_fill_to_wire_playlist_id(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_storage_id(
      StorageId apiObj, ffi.Pointer<wire_StorageId> wireObj) {
    _api_fill_to_wire_storage_id(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_music_id(MusicId apiObj, wire_MusicId wireObj) {
    wireObj.field0 = api2wire_i64(apiObj.field0);
  }

  void _api_fill_to_wire_playlist_id(
      PlaylistId apiObj, wire_PlaylistId wireObj) {
    wireObj.field0 = api2wire_i64(apiObj.field0);
  }

  void _api_fill_to_wire_storage_id(StorageId apiObj, wire_StorageId wireObj) {
    wireObj.field0 = api2wire_i64(apiObj.field0);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class EaseClientWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  EaseClientWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  EaseClientWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_init_bind_report_panic(
    int port_,
  ) {
    return _wire_init_bind_report_panic(
      port_,
    );
  }

  late final _wire_init_bind_report_panicPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_init_bind_report_panic');
  late final _wire_init_bind_report_panic =
      _wire_init_bind_report_panicPtr.asFunction<void Function(int)>();

  void wire_init_notify_schedule(
    int port_,
  ) {
    return _wire_init_notify_schedule(
      port_,
    );
  }

  late final _wire_init_notify_schedulePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_init_notify_schedule');
  late final _wire_init_notify_schedule =
      _wire_init_notify_schedulePtr.asFunction<void Function(int)>();

  void wire_init_bind_resume_music(
    int port_,
  ) {
    return _wire_init_bind_resume_music(
      port_,
    );
  }

  late final _wire_init_bind_resume_musicPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_init_bind_resume_music');
  late final _wire_init_bind_resume_music =
      _wire_init_bind_resume_musicPtr.asFunction<void Function(int)>();

  void wire_init_bind_pause_music(
    int port_,
  ) {
    return _wire_init_bind_pause_music(
      port_,
    );
  }

  late final _wire_init_bind_pause_musicPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_init_bind_pause_music');
  late final _wire_init_bind_pause_music =
      _wire_init_bind_pause_musicPtr.asFunction<void Function(int)>();

  void wire_init_bind_stop_music(
    int port_,
  ) {
    return _wire_init_bind_stop_music(
      port_,
    );
  }

  late final _wire_init_bind_stop_musicPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_init_bind_stop_music');
  late final _wire_init_bind_stop_music =
      _wire_init_bind_stop_musicPtr.asFunction<void Function(int)>();

  void wire_init_seek_music(
    int port_,
  ) {
    return _wire_init_seek_music(
      port_,
    );
  }

  late final _wire_init_seek_musicPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_init_seek_music');
  late final _wire_init_seek_music =
      _wire_init_seek_musicPtr.asFunction<void Function(int)>();

  void wire_set_music_url(
    int port_,
  ) {
    return _wire_set_music_url(
      port_,
    );
  }

  late final _wire_set_music_urlPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_set_music_url');
  late final _wire_set_music_url =
      _wire_set_music_urlPtr.asFunction<void Function(int)>();

  void wire_bind_toast_error(
    int port_,
  ) {
    return _wire_bind_toast_error(
      port_,
    );
  }

  late final _wire_bind_toast_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_bind_toast_error');
  late final _wire_bind_toast_error =
      _wire_bind_toast_errorPtr.asFunction<void Function(int)>();

  WireSyncReturn wire_initialize_client(
    ffi.Pointer<wire_ArgInitializeApp> arg,
  ) {
    return _wire_initialize_client(
      arg,
    );
  }

  late final _wire_initialize_clientPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_ArgInitializeApp>)>>('wire_initialize_client');
  late final _wire_initialize_client = _wire_initialize_clientPtr.asFunction<
      WireSyncReturn Function(ffi.Pointer<wire_ArgInitializeApp>)>();

  WireSyncReturn wire_flush_schedule() {
    return _wire_flush_schedule();
  }

  late final _wire_flush_schedulePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_flush_schedule');
  late final _wire_flush_schedule =
      _wire_flush_schedulePtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_initialize_app(
    ffi.Pointer<wire_ArgInitializeApp> arg,
  ) {
    return _wire_initialize_app(
      arg,
    );
  }

  late final _wire_initialize_appPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_ArgInitializeApp>)>>('wire_initialize_app');
  late final _wire_initialize_app = _wire_initialize_appPtr.asFunction<
      WireSyncReturn Function(ffi.Pointer<wire_ArgInitializeApp>)>();

  WireSyncReturn wire_update_storage_permission(
    bool arg,
  ) {
    return _wire_update_storage_permission(
      arg,
    );
  }

  late final _wire_update_storage_permissionPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Bool)>>(
          'wire_update_storage_permission');
  late final _wire_update_storage_permission =
      _wire_update_storage_permissionPtr
          .asFunction<WireSyncReturn Function(bool)>();

  WireSyncReturn wire_play_music(
    ffi.Pointer<wire_MusicId> arg,
  ) {
    return _wire_play_music(
      arg,
    );
  }

  late final _wire_play_musicPtr = _lookup<
          ffi
          .NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_MusicId>)>>(
      'wire_play_music');
  late final _wire_play_music = _wire_play_musicPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_MusicId>)>();

  WireSyncReturn wire_pause_music() {
    return _wire_pause_music();
  }

  late final _wire_pause_musicPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_pause_music');
  late final _wire_pause_music =
      _wire_pause_musicPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_resume_music() {
    return _wire_resume_music();
  }

  late final _wire_resume_musicPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_resume_music');
  late final _wire_resume_music =
      _wire_resume_musicPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_stop_music() {
    return _wire_stop_music();
  }

  late final _wire_stop_musicPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>('wire_stop_music');
  late final _wire_stop_music =
      _wire_stop_musicPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_seek_music(
    ffi.Pointer<wire_ArgSeekMusic> arg,
  ) {
    return _wire_seek_music(
      arg,
    );
  }

  late final _wire_seek_musicPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_ArgSeekMusic>)>>('wire_seek_music');
  late final _wire_seek_music = _wire_seek_musicPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_ArgSeekMusic>)>();

  WireSyncReturn wire_set_current_music_position_for_player_internal(
    int arg,
  ) {
    return _wire_set_current_music_position_for_player_internal(
      arg,
    );
  }

  late final _wire_set_current_music_position_for_player_internalPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Uint64)>>(
          'wire_set_current_music_position_for_player_internal');
  late final _wire_set_current_music_position_for_player_internal =
      _wire_set_current_music_position_for_player_internalPtr
          .asFunction<WireSyncReturn Function(int)>();

  WireSyncReturn wire_update_current_music_total_duration_for_player_internal(
    int arg,
  ) {
    return _wire_update_current_music_total_duration_for_player_internal(
      arg,
    );
  }

  late final _wire_update_current_music_total_duration_for_player_internalPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Uint64)>>(
          'wire_update_current_music_total_duration_for_player_internal');
  late final _wire_update_current_music_total_duration_for_player_internal =
      _wire_update_current_music_total_duration_for_player_internalPtr
          .asFunction<WireSyncReturn Function(int)>();

  WireSyncReturn wire_update_current_music_playing_for_player_internal(
    bool arg,
  ) {
    return _wire_update_current_music_playing_for_player_internal(
      arg,
    );
  }

  late final _wire_update_current_music_playing_for_player_internalPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Bool)>>(
          'wire_update_current_music_playing_for_player_internal');
  late final _wire_update_current_music_playing_for_player_internal =
      _wire_update_current_music_playing_for_player_internalPtr
          .asFunction<WireSyncReturn Function(bool)>();

  WireSyncReturn wire_handle_play_music_event_for_player_internal(
    int arg,
  ) {
    return _wire_handle_play_music_event_for_player_internal(
      arg,
    );
  }

  late final _wire_handle_play_music_event_for_player_internalPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Int32)>>(
          'wire_handle_play_music_event_for_player_internal');
  late final _wire_handle_play_music_event_for_player_internal =
      _wire_handle_play_music_event_for_player_internalPtr
          .asFunction<WireSyncReturn Function(int)>();

  WireSyncReturn wire_play_next_music() {
    return _wire_play_next_music();
  }

  late final _wire_play_next_musicPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_play_next_music');
  late final _wire_play_next_music =
      _wire_play_next_musicPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_play_previous_music() {
    return _wire_play_previous_music();
  }

  late final _wire_play_previous_musicPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_play_previous_music');
  late final _wire_play_previous_music =
      _wire_play_previous_musicPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_update_music_playmode_to_next() {
    return _wire_update_music_playmode_to_next();
  }

  late final _wire_update_music_playmode_to_nextPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_update_music_playmode_to_next');
  late final _wire_update_music_playmode_to_next =
      _wire_update_music_playmode_to_nextPtr
          .asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_update_time_to_pause(
    int arg,
  ) {
    return _wire_update_time_to_pause(
      arg,
    );
  }

  late final _wire_update_time_to_pausePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Uint64)>>(
          'wire_update_time_to_pause');
  late final _wire_update_time_to_pause =
      _wire_update_time_to_pausePtr.asFunction<WireSyncReturn Function(int)>();

  WireSyncReturn wire_remove_time_to_pause() {
    return _wire_remove_time_to_pause();
  }

  late final _wire_remove_time_to_pausePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_remove_time_to_pause');
  late final _wire_remove_time_to_pause =
      _wire_remove_time_to_pausePtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_prepare_import_lyric() {
    return _wire_prepare_import_lyric();
  }

  late final _wire_prepare_import_lyricPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_prepare_import_lyric');
  late final _wire_prepare_import_lyric =
      _wire_prepare_import_lyricPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_remove_current_music_lyric() {
    return _wire_remove_current_music_lyric();
  }

  late final _wire_remove_current_music_lyricPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_remove_current_music_lyric');
  late final _wire_remove_current_music_lyric =
      _wire_remove_current_music_lyricPtr
          .asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_change_to_current_music_playlist() {
    return _wire_change_to_current_music_playlist();
  }

  late final _wire_change_to_current_music_playlistPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_change_to_current_music_playlist');
  late final _wire_change_to_current_music_playlist =
      _wire_change_to_current_music_playlistPtr
          .asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_prepare_edit_playlist(
    ffi.Pointer<wire_PlaylistId> arg,
  ) {
    return _wire_prepare_edit_playlist(
      arg,
    );
  }

  late final _wire_prepare_edit_playlistPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_PlaylistId>)>>('wire_prepare_edit_playlist');
  late final _wire_prepare_edit_playlist = _wire_prepare_edit_playlistPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_PlaylistId>)>();

  WireSyncReturn wire_finish_edit_playlist() {
    return _wire_finish_edit_playlist();
  }

  late final _wire_finish_edit_playlistPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_finish_edit_playlist');
  late final _wire_finish_edit_playlist =
      _wire_finish_edit_playlistPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_prepare_edit_playlist_cover() {
    return _wire_prepare_edit_playlist_cover();
  }

  late final _wire_prepare_edit_playlist_coverPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_prepare_edit_playlist_cover');
  late final _wire_prepare_edit_playlist_cover =
      _wire_prepare_edit_playlist_coverPtr
          .asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_update_edit_playlist_name(
    ffi.Pointer<wire_uint_8_list> arg,
  ) {
    return _wire_update_edit_playlist_name(
      arg,
    );
  }

  late final _wire_update_edit_playlist_namePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>>(
      'wire_update_edit_playlist_name');
  late final _wire_update_edit_playlist_name =
      _wire_update_edit_playlist_namePtr
          .asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_clear_edit_playlist_cover() {
    return _wire_clear_edit_playlist_cover();
  }

  late final _wire_clear_edit_playlist_coverPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_clear_edit_playlist_cover');
  late final _wire_clear_edit_playlist_cover =
      _wire_clear_edit_playlist_coverPtr
          .asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_prepare_import_entries_in_current_playlist() {
    return _wire_prepare_import_entries_in_current_playlist();
  }

  late final _wire_prepare_import_entries_in_current_playlistPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_prepare_import_entries_in_current_playlist');
  late final _wire_prepare_import_entries_in_current_playlist =
      _wire_prepare_import_entries_in_current_playlistPtr
          .asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_finish_create_playlist() {
    return _wire_finish_create_playlist();
  }

  late final _wire_finish_create_playlistPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_finish_create_playlist');
  late final _wire_finish_create_playlist =
      _wire_finish_create_playlistPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_clear_create_playlist() {
    return _wire_clear_create_playlist();
  }

  late final _wire_clear_create_playlistPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_clear_create_playlist');
  late final _wire_clear_create_playlist =
      _wire_clear_create_playlistPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_reset_create_playlist_full() {
    return _wire_reset_create_playlist_full();
  }

  late final _wire_reset_create_playlist_fullPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_reset_create_playlist_full');
  late final _wire_reset_create_playlist_full =
      _wire_reset_create_playlist_fullPtr
          .asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_prepare_create_playlist_cover() {
    return _wire_prepare_create_playlist_cover();
  }

  late final _wire_prepare_create_playlist_coverPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_prepare_create_playlist_cover');
  late final _wire_prepare_create_playlist_cover =
      _wire_prepare_create_playlist_coverPtr
          .asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_prepare_create_playlist_entries() {
    return _wire_prepare_create_playlist_entries();
  }

  late final _wire_prepare_create_playlist_entriesPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_prepare_create_playlist_entries');
  late final _wire_prepare_create_playlist_entries =
      _wire_prepare_create_playlist_entriesPtr
          .asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_prepare_create_playlist() {
    return _wire_prepare_create_playlist();
  }

  late final _wire_prepare_create_playlistPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_prepare_create_playlist');
  late final _wire_prepare_create_playlist =
      _wire_prepare_create_playlistPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_update_create_playlist_name(
    ffi.Pointer<wire_uint_8_list> arg,
  ) {
    return _wire_update_create_playlist_name(
      arg,
    );
  }

  late final _wire_update_create_playlist_namePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>>(
      'wire_update_create_playlist_name');
  late final _wire_update_create_playlist_name =
      _wire_update_create_playlist_namePtr
          .asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_clear_create_playlist_cover() {
    return _wire_clear_create_playlist_cover();
  }

  late final _wire_clear_create_playlist_coverPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_clear_create_playlist_cover');
  late final _wire_clear_create_playlist_cover =
      _wire_clear_create_playlist_coverPtr
          .asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_update_create_playlist_mode(
    int arg,
  ) {
    return _wire_update_create_playlist_mode(
      arg,
    );
  }

  late final _wire_update_create_playlist_modePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Int32)>>(
          'wire_update_create_playlist_mode');
  late final _wire_update_create_playlist_mode =
      _wire_update_create_playlist_modePtr
          .asFunction<WireSyncReturn Function(int)>();

  WireSyncReturn wire_change_current_playlist(
    ffi.Pointer<wire_PlaylistId> arg,
  ) {
    return _wire_change_current_playlist(
      arg,
    );
  }

  late final _wire_change_current_playlistPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_PlaylistId>)>>('wire_change_current_playlist');
  late final _wire_change_current_playlist = _wire_change_current_playlistPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_PlaylistId>)>();

  WireSyncReturn wire_remove_playlist(
    ffi.Pointer<wire_PlaylistId> arg,
  ) {
    return _wire_remove_playlist(
      arg,
    );
  }

  late final _wire_remove_playlistPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_PlaylistId>)>>('wire_remove_playlist');
  late final _wire_remove_playlist = _wire_remove_playlistPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_PlaylistId>)>();

  WireSyncReturn wire_remove_music_from_current_playlist(
    ffi.Pointer<wire_MusicId> arg,
  ) {
    return _wire_remove_music_from_current_playlist(
      arg,
    );
  }

  late final _wire_remove_music_from_current_playlistPtr = _lookup<
          ffi
          .NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_MusicId>)>>(
      'wire_remove_music_from_current_playlist');
  late final _wire_remove_music_from_current_playlist =
      _wire_remove_music_from_current_playlistPtr
          .asFunction<WireSyncReturn Function(ffi.Pointer<wire_MusicId>)>();

  WireSyncReturn wire_play_all_musics() {
    return _wire_play_all_musics();
  }

  late final _wire_play_all_musicsPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_play_all_musics');
  late final _wire_play_all_musics =
      _wire_play_all_musicsPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_clear_edit_playlist_state() {
    return _wire_clear_edit_playlist_state();
  }

  late final _wire_clear_edit_playlist_statePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_clear_edit_playlist_state');
  late final _wire_clear_edit_playlist_state =
      _wire_clear_edit_playlist_statePtr
          .asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_update_root_subkey(
    int arg,
  ) {
    return _wire_update_root_subkey(
      arg,
    );
  }

  late final _wire_update_root_subkeyPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Int32)>>(
          'wire_update_root_subkey');
  late final _wire_update_root_subkey =
      _wire_update_root_subkeyPtr.asFunction<WireSyncReturn Function(int)>();

  WireSyncReturn wire_remove_storage(
    ffi.Pointer<wire_StorageId> arg,
  ) {
    return _wire_remove_storage(
      arg,
    );
  }

  late final _wire_remove_storagePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_StorageId>)>>('wire_remove_storage');
  late final _wire_remove_storage = _wire_remove_storagePtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_StorageId>)>();

  WireSyncReturn wire_locate_entry(
    ffi.Pointer<wire_uint_8_list> arg,
  ) {
    return _wire_locate_entry(
      arg,
    );
  }

  late final _wire_locate_entryPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>)>>('wire_locate_entry');
  late final _wire_locate_entry = _wire_locate_entryPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_select_entry(
    ffi.Pointer<wire_uint_8_list> arg,
  ) {
    return _wire_select_entry(
      arg,
    );
  }

  late final _wire_select_entryPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>)>>('wire_select_entry');
  late final _wire_select_entry = _wire_select_entryPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_toggle_all_checked_entries() {
    return _wire_toggle_all_checked_entries();
  }

  late final _wire_toggle_all_checked_entriesPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_toggle_all_checked_entries');
  late final _wire_toggle_all_checked_entries =
      _wire_toggle_all_checked_entriesPtr
          .asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_select_storage_in_import(
    ffi.Pointer<wire_StorageId> arg,
  ) {
    return _wire_select_storage_in_import(
      arg,
    );
  }

  late final _wire_select_storage_in_importPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_StorageId>)>>('wire_select_storage_in_import');
  late final _wire_select_storage_in_import = _wire_select_storage_in_importPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_StorageId>)>();

  WireSyncReturn wire_refresh_current_storage_in_import() {
    return _wire_refresh_current_storage_in_import();
  }

  late final _wire_refresh_current_storage_in_importPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_refresh_current_storage_in_import');
  late final _wire_refresh_current_storage_in_import =
      _wire_refresh_current_storage_in_importPtr
          .asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_finish_selected_entries_in_import() {
    return _wire_finish_selected_entries_in_import();
  }

  late final _wire_finish_selected_entries_in_importPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_finish_selected_entries_in_import');
  late final _wire_finish_selected_entries_in_import =
      _wire_finish_selected_entries_in_importPtr
          .asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_prepare_edit_storage(
    ffi.Pointer<wire_StorageId> arg,
  ) {
    return _wire_prepare_edit_storage(
      arg,
    );
  }

  late final _wire_prepare_edit_storagePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_StorageId>)>>('wire_prepare_edit_storage');
  late final _wire_prepare_edit_storage = _wire_prepare_edit_storagePtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_StorageId>)>();

  WireSyncReturn wire_upsert_storage(
    ffi.Pointer<wire_ArgUpsertStorage> arg,
  ) {
    return _wire_upsert_storage(
      arg,
    );
  }

  late final _wire_upsert_storagePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_ArgUpsertStorage>)>>('wire_upsert_storage');
  late final _wire_upsert_storage = _wire_upsert_storagePtr.asFunction<
      WireSyncReturn Function(ffi.Pointer<wire_ArgUpsertStorage>)>();

  WireSyncReturn wire_test_connection(
    ffi.Pointer<wire_ArgUpsertStorage> arg,
  ) {
    return _wire_test_connection(
      arg,
    );
  }

  late final _wire_test_connectionPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_ArgUpsertStorage>)>>('wire_test_connection');
  late final _wire_test_connection = _wire_test_connectionPtr.asFunction<
      WireSyncReturn Function(ffi.Pointer<wire_ArgUpsertStorage>)>();

  ffi.Pointer<wire_ArgInitializeApp> new_box_autoadd_arg_initialize_app_0() {
    return _new_box_autoadd_arg_initialize_app_0();
  }

  late final _new_box_autoadd_arg_initialize_app_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_ArgInitializeApp> Function()>>(
      'new_box_autoadd_arg_initialize_app_0');
  late final _new_box_autoadd_arg_initialize_app_0 =
      _new_box_autoadd_arg_initialize_app_0Ptr
          .asFunction<ffi.Pointer<wire_ArgInitializeApp> Function()>();

  ffi.Pointer<wire_ArgSeekMusic> new_box_autoadd_arg_seek_music_0() {
    return _new_box_autoadd_arg_seek_music_0();
  }

  late final _new_box_autoadd_arg_seek_music_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ArgSeekMusic> Function()>>(
          'new_box_autoadd_arg_seek_music_0');
  late final _new_box_autoadd_arg_seek_music_0 =
      _new_box_autoadd_arg_seek_music_0Ptr
          .asFunction<ffi.Pointer<wire_ArgSeekMusic> Function()>();

  ffi.Pointer<wire_ArgUpsertStorage> new_box_autoadd_arg_upsert_storage_0() {
    return _new_box_autoadd_arg_upsert_storage_0();
  }

  late final _new_box_autoadd_arg_upsert_storage_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_ArgUpsertStorage> Function()>>(
      'new_box_autoadd_arg_upsert_storage_0');
  late final _new_box_autoadd_arg_upsert_storage_0 =
      _new_box_autoadd_arg_upsert_storage_0Ptr
          .asFunction<ffi.Pointer<wire_ArgUpsertStorage> Function()>();

  ffi.Pointer<wire_MusicId> new_box_autoadd_music_id_0() {
    return _new_box_autoadd_music_id_0();
  }

  late final _new_box_autoadd_music_id_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_MusicId> Function()>>(
          'new_box_autoadd_music_id_0');
  late final _new_box_autoadd_music_id_0 = _new_box_autoadd_music_id_0Ptr
      .asFunction<ffi.Pointer<wire_MusicId> Function()>();

  ffi.Pointer<wire_PlaylistId> new_box_autoadd_playlist_id_0() {
    return _new_box_autoadd_playlist_id_0();
  }

  late final _new_box_autoadd_playlist_id_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_PlaylistId> Function()>>(
          'new_box_autoadd_playlist_id_0');
  late final _new_box_autoadd_playlist_id_0 = _new_box_autoadd_playlist_id_0Ptr
      .asFunction<ffi.Pointer<wire_PlaylistId> Function()>();

  ffi.Pointer<wire_StorageId> new_box_autoadd_storage_id_0() {
    return _new_box_autoadd_storage_id_0();
  }

  late final _new_box_autoadd_storage_id_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_StorageId> Function()>>(
          'new_box_autoadd_storage_id_0');
  late final _new_box_autoadd_storage_id_0 = _new_box_autoadd_storage_id_0Ptr
      .asFunction<ffi.Pointer<wire_StorageId> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>(
      'new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_ArgInitializeApp extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> app_document_dir;

  @ffi.Uint32()
  external int schema_version;

  external ffi.Pointer<wire_uint_8_list> storage_path;
}

final class wire_MusicId extends ffi.Struct {
  @ffi.Int64()
  external int field0;
}

final class wire_ArgSeekMusic extends ffi.Struct {
  @ffi.Uint64()
  external int duration;
}

final class wire_PlaylistId extends ffi.Struct {
  @ffi.Int64()
  external int field0;
}

final class wire_StorageId extends ffi.Struct {
  @ffi.Int64()
  external int field0;
}

final class wire_ArgUpsertStorage extends ffi.Struct {
  external ffi.Pointer<wire_StorageId> id;

  external ffi.Pointer<wire_uint_8_list> addr;

  external ffi.Pointer<wire_uint_8_list> alias;

  external ffi.Pointer<wire_uint_8_list> username;

  external ffi.Pointer<wire_uint_8_list> password;

  @ffi.Bool()
  external bool is_anonymous;

  @ffi.Int32()
  external int typ;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
